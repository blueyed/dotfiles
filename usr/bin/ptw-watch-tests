#!/bin/sh

# Run pytest-watch and add pass/fail handlers, which check for and make use of
# an existing tmux pane.  It falls back to using notify-send.

# A wrapper script for a project could look like this:
#
#     #!/bin/sh
#     # Change to file's parent dir (POSIXly).
#     cd -P -- "$(dirname -- "$0")/.." || exit
#     exec ptw-watch-tests source-dir -vv "$@"

usage() {
  echo "Usage: $0 <watch-dir> [run-dir] [pytest-opts]"
  exit 64
}

if [ -z "$1" ]; then
  usage
fi

watch_src="$1"; shift
if ! [ -d "$watch_src" ]; then
  usage
fi

ptw_args=
pytest_args=
had_dashdash=0
for i; do
  if [ "x$i" = "x--" ]; then
    had_dashdash=1
  elif [ "$had_dashdash" = 1 ]; then
    # XXX: needs to pass/use single arguments; use bash (array)?!
    pytest_args="$pytest_args $i"
  else
    ptw_args="$ptw_args $i"
  fi
done
if [ "$had_dashdash" = 0 ]; then
  pytest_args="$ptw_args"
  ptw_args=
fi

# Template for printf.
# shellcheck disable=SC2016,SC1004
template_set_tmux_style='test -n "$TMUX_PANE" && { \
  style="%s"; test -n "$style" \
    && tmux set-window-option -q -t "$TMUX_PANE" window-status-style "$style"; } \
  ; { msg="%s"; test -n "$msg" && notify-send "$msg"; }'

# Create a script to be executed via --afterrun.
# This is required to get the exit code.
afterrun_script="$(mktemp)"
chmod +x "$afterrun_script"
cat > "$afterrun_script" <<EOF
if [ "\$1" = 0 ]; then
  $(printf "$template_set_tmux_style" fg=green 'Tests passed.')
elif [ "\$1" = 5 ]; then
  $(printf "$template_set_tmux_style" fg=green 'No tests collected.')
elif [ "\$1" = 2 ]; then
  $(printf "$template_set_tmux_style" '' 'Tests interrupted.')
else
  $(printf "$template_set_tmux_style" fg=red 'Tests failed.')
fi
EOF

# Get the current window-status-style option from tmux (window or global).
# shellcheck disable=SC2015
beforerun_script="$(mktemp)"
chmod +x "$beforerun_script"
cat > "$beforerun_script" <<EOF
if [ -n "\$TMUX_PANE" ]; then
  tmux_fg_default="\$(tmux show -w window-status-style | cut -f2 -d\ )"
  if [ -z "\$tmux_fg_default" ]; then
    tmux_fg_default="\$(tmux show -wg window-status-style | cut -f2 -d\ )"
  fi
  # Remove ",italics" which I am currently using for any running command via
  # preexec.
  tmux_fg_default=\${tmux_fg_default%,italics}
  $(printf "$template_set_tmux_style" "\$tmux_fg_default,italics" '')
fi
EOF

# shellcheck disable=SC2064
trap "rm '$afterrun_script' '$beforerun_script'" 0

# Change to watch-dir to work around https://github.com/joeyespo/pytest-watch/issues/53.
cd "$watch_src" || exit
ptw $ptw_args \
  --beforerun "$beforerun_script" \
  --afterrun "$afterrun_script" \
  --onexit "echo ONEXIT; test -n '$TMUX_PANE' && tmux set-window-option -u -q \
          -t '$TMUX_PANE' window-status-style" \
  ${TMUX:+--nobeep } \
  -- -v -ra $pytest_args
